// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NumAndDrive.Database;

#nullable disable

namespace NumAndDrive.Migrations
{
    [DbContext(typeof(NumAndDriveDbContext))]
    partial class NumAndDriveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.ActivationDay", b =>
                {
                    b.Property<int>("ActivationDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ActivationDayId"));

                    b.Property<DateOnly?>("ArchiveDate")
                        .HasColumnType("date");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ActivationDayId");

                    b.ToTable("ActivationDay", (string)null);

                    b.HasData(
                        new
                        {
                            ActivationDayId = 1,
                            Day = "Lundi"
                        },
                        new
                        {
                            ActivationDayId = 2,
                            Day = "Mardi"
                        },
                        new
                        {
                            ActivationDayId = 3,
                            Day = "Mercredi"
                        },
                        new
                        {
                            ActivationDayId = 4,
                            Day = "Jeudi"
                        },
                        new
                        {
                            ActivationDayId = 5,
                            Day = "Vendredi"
                        },
                        new
                        {
                            ActivationDayId = 6,
                            Day = "Samedi"
                        },
                        new
                        {
                            ActivationDayId = 7,
                            Day = "Dimanche"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.ActivationDays_Journeys", b =>
                {
                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.Property<int>("ActivationDayId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ArchiveDate")
                        .HasColumnType("date");

                    b.HasKey("JourneyId", "ActivationDayId");

                    b.HasIndex("ActivationDayId");

                    b.ToTable("ActivationDays__Journeys", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<DateOnly?>("ArchiveDate")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.HasKey("AddressId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Metz",
                            CompanyId = 1,
                            PostalAddress = "86 rue aux arènes",
                            PostalCode = "57000"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Addresses_Journeys", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.HasKey("AddressId", "JourneyId");

                    b.HasIndex("JourneyId");

                    b.ToTable("Addresses__Journeys", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CarId"));

                    b.Property<DateOnly?>("ArchiveDate")
                        .HasColumnType("date");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<int>("FuelId")
                        .HasColumnType("int");

                    b.Property<string>("Matriculation")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("CarId");

                    b.HasIndex("FuelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("CompanyId");

                    b.ToTable("Company", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            Name = "Metz Numeric School"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateOnly?>("ArchiveDate")
                        .HasColumnType("date");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Department", (string)null);

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            CompanyId = 1,
                            Name = "CDA"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Filter", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FilterId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FilterId");

                    b.ToTable("Filter", (string)null);

                    b.HasData(
                        new
                        {
                            FilterId = 1,
                            Name = "Fumeur"
                        },
                        new
                        {
                            FilterId = 2,
                            Name = "Non fumeur"
                        },
                        new
                        {
                            FilterId = 3,
                            Name = "Bavard"
                        },
                        new
                        {
                            FilterId = 4,
                            Name = "Silencieux"
                        },
                        new
                        {
                            FilterId = 5,
                            Name = "Animaux bienvenus"
                        },
                        new
                        {
                            FilterId = 6,
                            Name = "Coffre vide"
                        },
                        new
                        {
                            FilterId = 7,
                            Name = "Coffre plein"
                        },
                        new
                        {
                            FilterId = 8,
                            Name = "En musique"
                        },
                        new
                        {
                            FilterId = 9,
                            Name = "Au calme"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Filters_Journeys", b =>
                {
                    b.Property<int>("FilterId")
                        .HasColumnType("int");

                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.HasKey("FilterId", "JourneyId");

                    b.HasIndex("JourneyId");

                    b.ToTable("Filters__Journeys", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Filters_Users", b =>
                {
                    b.Property<int>("FilterId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("FilterId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Filters__Users", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Fuel", b =>
                {
                    b.Property<int>("FuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FuelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FuelId");

                    b.ToTable("Fuel", (string)null);

                    b.HasData(
                        new
                        {
                            FuelId = 1,
                            Type = "Essence"
                        },
                        new
                        {
                            FuelId = 2,
                            Type = "Diesel"
                        },
                        new
                        {
                            FuelId = 3,
                            Type = "Hybride"
                        },
                        new
                        {
                            FuelId = 4,
                            Type = "Électrique"
                        },
                        new
                        {
                            FuelId = 5,
                            Type = "Autres"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Journey", b =>
                {
                    b.Property<int>("JourneyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("JourneyId"));

                    b.Property<int>("AddressDepartingId")
                        .HasColumnType("int");

                    b.Property<int>("AddressIncomingId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ArchiveDate")
                        .HasColumnType("date");

                    b.Property<int>("AvailableSpots")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("DepartureHour")
                        .HasColumnType("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("JourneyId");

                    b.HasIndex("AddressDepartingId");

                    b.HasIndex("AddressIncomingId");

                    b.HasIndex("UserId");

                    b.ToTable("Journey", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Journeys_Users", b =>
                {
                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("JourneyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Journeys__Users", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateOnly?>("ArchiveDate")
                        .HasColumnType("date");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateReceived")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateSent")
                        .HasColumnType("date");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("UserReceiverId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserSenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("MessageId");

                    b.HasIndex("UserReceiverId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification", (string)null);

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            Type = "Mail"
                        },
                        new
                        {
                            NotificationId = 2,
                            Type = "Application"
                        },
                        new
                        {
                            NotificationId = 3,
                            Type = "Téléphone"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Notifications_Users", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications__Users", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("UserReceiverId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserSenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ReviewId");

                    b.HasIndex("UserReceiverId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RewardId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RewardId");

                    b.ToTable("Reward", (string)null);

                    b.HasData(
                        new
                        {
                            RewardId = 1,
                            Description = "Effectuer son premier voyage en passager-e",
                            Name = "Voyageur-euse en herbe",
                            PicturePath = ""
                        },
                        new
                        {
                            RewardId = 2,
                            Description = "Effectuer son premier voyage en conducteur-rice",
                            Name = "Apprenti-e conducteur-rice",
                            PicturePath = ""
                        },
                        new
                        {
                            RewardId = 3,
                            Description = "Donner son premier avis",
                            Name = "Contrôle qualité",
                            PicturePath = ""
                        },
                        new
                        {
                            RewardId = 4,
                            Description = "Recevoir son premier avis",
                            Name = "Étoile montante",
                            PicturePath = ""
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.Rewards_Users", b =>
                {
                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RewardId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Rewards__Users", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Type = "Intervenant-e"
                        },
                        new
                        {
                            StatusId = 2,
                            Type = "Administrateur-trice"
                        },
                        new
                        {
                            StatusId = 3,
                            Type = "Apprenant-e"
                        },
                        new
                        {
                            StatusId = 4,
                            Type = "Formateur-trice"
                        });
                });

            modelBuilder.Entity("NumAndDrive.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ArchiveDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("NumAndDrive.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserType", (string)null);

                    b.HasData(
                        new
                        {
                            UserTypeId = 1,
                            TypeName = "Mamie au volant"
                        },
                        new
                        {
                            UserTypeId = 2,
                            TypeName = "Sébastien Loeb"
                        },
                        new
                        {
                            UserTypeId = 3,
                            TypeName = "Auto-tamponneur"
                        },
                        new
                        {
                            UserTypeId = 4,
                            TypeName = "Boîte de nuit mobile"
                        },
                        new
                        {
                            UserTypeId = 5,
                            TypeName = "Grand-e voyageur-euse"
                        },
                        new
                        {
                            UserTypeId = 6,
                            TypeName = "Grand-e bavard-e"
                        },
                        new
                        {
                            UserTypeId = 7,
                            TypeName = "Pas du matin"
                        },
                        new
                        {
                            UserTypeId = 8,
                            TypeName = "Copilote au top"
                        },
                        new
                        {
                            UserTypeId = 9,
                            TypeName = "Compteur-euse d'histoires"
                        },
                        new
                        {
                            UserTypeId = 10,
                            TypeName = "Ronfleur-euse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NumAndDrive.Models.ActivationDays_Journeys", b =>
                {
                    b.HasOne("NumAndDrive.Models.ActivationDay", "ActivationDay")
                        .WithMany("ActivationDays_Journeys")
                        .HasForeignKey("ActivationDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.Journey", "Journey")
                        .WithMany("ActivationDays_Journeys")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivationDay");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("NumAndDrive.Models.Address", b =>
                {
                    b.HasOne("NumAndDrive.Models.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NumAndDrive.Models.Addresses_Journeys", b =>
                {
                    b.HasOne("NumAndDrive.Models.Address", "Address")
                        .WithMany("Addresses_Journeys")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.Journey", "Journey")
                        .WithMany("Addresses_Journeys")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("NumAndDrive.Models.Car", b =>
                {
                    b.HasOne("NumAndDrive.Models.Fuel", "Fuel")
                        .WithMany("Cars")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "User")
                        .WithOne("Car")
                        .HasForeignKey("NumAndDrive.Models.Car", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fuel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NumAndDrive.Models.Department", b =>
                {
                    b.HasOne("NumAndDrive.Models.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NumAndDrive.Models.Filters_Journeys", b =>
                {
                    b.HasOne("NumAndDrive.Models.Filter", "Filter")
                        .WithMany("Filters_Journeys")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.Journey", "Journey")
                        .WithMany("Filters_Journeys")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filter");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("NumAndDrive.Models.Filters_Users", b =>
                {
                    b.HasOne("NumAndDrive.Models.Filter", "Filter")
                        .WithMany("Filters_Users")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "User")
                        .WithMany("Filters_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NumAndDrive.Models.Journey", b =>
                {
                    b.HasOne("NumAndDrive.Models.Address", "AddressDeparting")
                        .WithMany("JourneysDeparting")
                        .HasForeignKey("AddressDepartingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.Address", "AddressIncoming")
                        .WithMany("JourneysIncoming")
                        .HasForeignKey("AddressIncomingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "User")
                        .WithMany("Journeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressDeparting");

                    b.Navigation("AddressIncoming");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NumAndDrive.Models.Journeys_Users", b =>
                {
                    b.HasOne("NumAndDrive.Models.Journey", "Journey")
                        .WithMany("Journeys_Users")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "User")
                        .WithMany("Journeys_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NumAndDrive.Models.Message", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", "UserReceiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("UserReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "UserSender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserReceiver");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("NumAndDrive.Models.Notifications_Users", b =>
                {
                    b.HasOne("NumAndDrive.Models.Notification", "Notification")
                        .WithMany("Notifications_Users")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "User")
                        .WithMany("Notifications_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NumAndDrive.Models.Review", b =>
                {
                    b.HasOne("NumAndDrive.Models.User", "UserReceiver")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("UserReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "UserSender")
                        .WithMany("ReviewsSent")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserReceiver");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("NumAndDrive.Models.Rewards_Users", b =>
                {
                    b.HasOne("NumAndDrive.Models.Reward", "Reward")
                        .WithMany("Rewards_Users")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NumAndDrive.Models.User", "User")
                        .WithMany("Rewards_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NumAndDrive.Models.User", b =>
                {
                    b.HasOne("NumAndDrive.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("NumAndDrive.Models.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId");

                    b.HasOne("NumAndDrive.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId");

                    b.Navigation("Department");

                    b.Navigation("Status");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("NumAndDrive.Models.ActivationDay", b =>
                {
                    b.Navigation("ActivationDays_Journeys");
                });

            modelBuilder.Entity("NumAndDrive.Models.Address", b =>
                {
                    b.Navigation("Addresses_Journeys");

                    b.Navigation("JourneysDeparting");

                    b.Navigation("JourneysIncoming");
                });

            modelBuilder.Entity("NumAndDrive.Models.Company", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("NumAndDrive.Models.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.Filter", b =>
                {
                    b.Navigation("Filters_Journeys");

                    b.Navigation("Filters_Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.Fuel", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("NumAndDrive.Models.Journey", b =>
                {
                    b.Navigation("ActivationDays_Journeys");

                    b.Navigation("Addresses_Journeys");

                    b.Navigation("Filters_Journeys");

                    b.Navigation("Journeys_Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.Notification", b =>
                {
                    b.Navigation("Notifications_Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.Reward", b =>
                {
                    b.Navigation("Rewards_Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.Status", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.User", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("Filters_Users");

                    b.Navigation("Journeys");

                    b.Navigation("Journeys_Users");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Notifications_Users");

                    b.Navigation("ReviewsReceived");

                    b.Navigation("ReviewsSent");

                    b.Navigation("Rewards_Users");
                });

            modelBuilder.Entity("NumAndDrive.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
